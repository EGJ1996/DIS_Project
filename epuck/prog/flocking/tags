!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	flocking.c	71;"	d	file:
AXLE_LENGTH	flocking.c	53;"	d	file:
DELTA_T	flocking.c	56;"	d	file:
FLOCK_SIZE	flocking.c	50;"	d	file:
MAX_SENS	flocking.c	47;"	d	file:
MAX_SPEED	flocking.c	48;"	d	file:
MAX_SPEED_WEB	flocking.c	49;"	d	file:
MIGRATION_WEIGHT	flocking.c	67;"	d	file:
MIGRATORY_URGE	flocking.c	69;"	d	file:
MIN_SENS	flocking.c	46;"	d	file:
M_PI	flocking.c	51;"	d	file:
NB_SENSORS	flocking.c	45;"	d	file:
RULE1_THRESHOLD	flocking.c	59;"	d	file:
RULE1_WEIGHT	flocking.c	60;"	d	file:
RULE2_THRESHOLD	flocking.c	62;"	d	file:
RULE2_WEIGHT	flocking.c	63;"	d	file:
RULE3_WEIGHT	flocking.c	65;"	d	file:
SPEED_UNIT_RADS	flocking.c	54;"	d	file:
WHEEL_RADIUS	flocking.c	55;"	d	file:
buffer	flocking.c	/^char buffer[80];$/;"	v
compute_wheel_speeds	flocking.c	/^void compute_wheel_speeds(int *msl, int *msr) $/;"	f
e_puck_matrix	flocking.c	/^int e_puck_matrix[16] = {-10,-10,-5,0,0,5,10,10,10,10,5,0,0,-5,-10,-10}; \/\/ for obstacle avoidance$/;"	v
getselector	flocking.c	/^int getselector()$/;"	f
i	flocking.c	/^int i;$/;"	v
initialized	flocking.c	/^int initialized[FLOCK_SIZE];		\/\/ != 0 if initial positions have been received$/;"	v
limit	flocking.c	/^void limit(int *number, int limit) {$/;"	f
main	flocking.c	/^int main(){ $/;"	f
migr	flocking.c	/^float migr[2] = {25,-25};	        \/\/ Migration vector$/;"	v
my_position	flocking.c	/^float my_position[3];     		\/\/ X, Z, Theta of the current robot$/;"	v
prev_my_position	flocking.c	/^float prev_my_position[3];  		\/\/ X, Z, Theta of the current robot in the previous time step$/;"	v
prev_relative_pos	flocking.c	/^float prev_relative_pos[FLOCK_SIZE][3];	\/\/ Previous relative  X, Z, Theta values$/;"	v
process_received_ping_messages	flocking.c	/^void process_received_ping_messages(void)$/;"	f
relative_pos	flocking.c	/^float relative_pos[FLOCK_SIZE][3];	\/\/ relative X, Z, Theta of all robots$/;"	v
relative_speed	flocking.c	/^float relative_speed[FLOCK_SIZE][2];	\/\/ Speeds calculated with Reynold's rules$/;"	v
reynolds_rules	flocking.c	/^void reynolds_rules() {$/;"	f
robot_id	flocking.c	/^int robot_id;				\/\/ Unique and normalized (between 0 and FLOCK_SIZE-1) robot ID$/;"	v
robot_name	flocking.c	/^char* robot_name;$/;"	v
send_ping	flocking.c	/^void send_ping(void)  $/;"	f
speed	flocking.c	/^float speed[FLOCK_SIZE][2];		\/\/ Speeds calculated with Reynold's rules$/;"	v
theta_robots	flocking.c	/^float theta_robots[FLOCK_SIZE];$/;"	v
update_self_motion	flocking.c	/^void update_self_motion(int msl, int msr) { $/;"	f
